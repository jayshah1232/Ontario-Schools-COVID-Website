[{"D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\index.js":"1","D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\App.js":"2","D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\reportWebVitals.js":"3","D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\Cards\\Cards.js":"4","D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\ActiveTable\\ActiveTable.js":"5","D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\Cards\\CardUI.js":"6","D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\Chart\\Chart.js":"7"},{"size":724,"mtime":1619152378820,"results":"8","hashOfConfig":"9"},{"size":7075,"mtime":1619462427151,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":3735,"mtime":1619461854638,"results":"12","hashOfConfig":"9"},{"size":6729,"mtime":1609303196934,"results":"13","hashOfConfig":"9"},{"size":836,"mtime":1617868146442,"results":"14","hashOfConfig":"9"},{"size":3216,"mtime":1619461934988,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"46eqad",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},"D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\index.js",[],["35","36"],"D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\App.js",[],"D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\reportWebVitals.js",[],"D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\Cards\\Cards.js",[],"D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\ActiveTable\\ActiveTable.js",["37","38","39","40","41"],"import React, { useState, useEffect } from 'react'\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css'\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport './active-table-style.css'\r\n\r\nlet activeData = []\r\nlet totalSchool = 0\r\nlet totalStudents = 0\r\nlet totalStaff = 0\r\nlet totalUnspec = 0\r\nlet totalCases = 0\r\n\r\nfunction ActiveTable(props) {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    useEffect(()=>{\r\n        console.log(\"entering useEffect\")\r\n        fetch(`https://covid-schools-data-api.herokuapp.com/activecases`)\r\n        .then((response) => {\r\n            console.log(response); // Logs the response\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n            setData(data);\r\n            setLoading(false);\r\n           // console.log(data)\r\n        });\r\n    }, []);\r\n\r\n    if(loading) {\r\n        console.log(\"loading\")\r\n        return (\r\n            <div className=\"loader\">\r\n                <div className=\"spinner-border m-5\"></div>\r\n            </div>\r\n        );\r\n    } else {\r\n        console.log(\"loading complete\");\r\n\r\n        var uniqueMunicipalities = [];\r\n        var uniqueMunicipalitiesCount = [];\r\n        var uniqueBoards = [];\r\n        var uniqueBoardsCount = [];\r\n\r\n        var i;\r\n        for (i = 0; i < data.length; i++) {\r\n            totalSchool++;\r\n            totalCases = totalCases + data[i].total_confirmed_cases;\r\n            totalStaff = totalStaff + data[i].confirmed_staff_cases;\r\n            totalStudents = totalStudents + data[i].confirmed_student_cases;\r\n            totalUnspec = totalUnspec + data[i].confirmed_unspecified_cases;\r\n\r\n        }\r\n        console.log(totalSchool + \", \" + totalCases + \", \" + totalStudents + \", \" + totalStaff + \", \" + totalUnspec)\r\n\r\n        const { SearchBar } = Search;\r\n        const columns = [{\r\n            dataField: 'school',\r\n            text: 'School Name',\r\n            sort: true,\r\n            footer: 'Total Schools: ' + totalSchool,\r\n            headerStyle: {position: 'sticky'}\r\n        }, {\r\n            dataField: 'school_board',\r\n            text: 'School Board',\r\n            sort: true,\r\n            footer: 'Total Boards: ' + totalSchool\r\n        }, {\r\n            dataField: 'municipality',\r\n            text: 'Municipality',\r\n            sort: true,\r\n            footer: 'Total Municipalities: ' + totalSchool\r\n        }, {\r\n            dataField: 'confirmed_student_cases',\r\n            text: 'Student Cases',\r\n            sort: true,\r\n            footer: 'Total Students: ' + totalStudents\r\n        }, {\r\n            dataField: 'confirmed_staff_cases',\r\n            text: 'Staff Cases',\r\n            sort: true,\r\n            footer: 'Total Staff: ' + totalStaff\r\n        }, {\r\n            dataField: 'confirmed_unspecified_cases',\r\n            text: 'Unspecified Cases',\r\n            sort: true,\r\n            footer: 'Total Unspecified: ' + totalUnspec\r\n        }, {\r\n            dataField: 'total_confirmed_cases',\r\n            text: 'Total Cases',\r\n            sort: true,\r\n            footer: 'Total Cases: ' + totalCases\r\n        }];\r\n\r\n        const customTotal = (from, to, size) => (\r\n            <span className=\"react-bootstrap-table-pagination-total\">\r\n              Showing { from } to { to } of { size } Results\r\n            </span>\r\n        );\r\n\r\n        const options = {\r\n            paginationSize: 4,\r\n            pageStartIndex: 1,\r\n            // alwaysShowAllBtns: true, // Always show next and previous button\r\n            // withFirstAndLast: false, // Hide the going to First and Last page button\r\n            // hideSizePerPage: true, // Hide the sizePerPage dropdown always\r\n            // hidePageListOnlyOnePage: true, // Hide the pagination list when only one page\r\n            firstPageText: 'First',\r\n            prePageText: 'Back',\r\n            nextPageText: 'Next',\r\n            lastPageText: 'Last',\r\n            nextPageTitle: 'First page',\r\n            prePageTitle: 'Pre page',\r\n            firstPageTitle: 'Next page',\r\n            lastPageTitle: 'Last page',\r\n            showTotal: true,\r\n            paginationTotalRenderer: customTotal,\r\n            disablePageTitle: true,\r\n            sizePerPageList: [{\r\n              text: '10', value: 10\r\n            }, {\r\n                text: '50', value: 50\r\n            },{\r\n              text: '100', value: 100\r\n            }, {\r\n              text: 'All', value: data.length\r\n            }] // A numeric array is also available. the purpose of above example is custom the text\r\n        };\r\n\r\n        return(\r\n            <div id='table' >\r\n                <ToolkitProvider\r\n                    keyField=\"index\"\r\n                    data={ data }\r\n                    columns={ columns }\r\n                    pagination={ paginationFactory(options) }\r\n                    search>\r\n                    {\r\n                        props => (\r\n                        <div>\r\n                            <SearchBar { ...props.searchProps } />\r\n                            <hr />\r\n                            <BootstrapTable\r\n                            { ...props.baseProps }\r\n                            pagination={ paginationFactory(options) }\r\n                            headerWrapperClasses='header-class'\r\n                            footerClasses=\"footer-class\"\r\n                            />\r\n                        </div>\r\n                        )\r\n                    }\r\n                </ToolkitProvider>\r\n            </div>\r\n            //<BootstrapTable keyField='school' data={ data } columns= { columns } pagination={ paginationFactory(options) }/>\r\n        )\r\n\r\n\r\n        // return(\r\n        //     <div id=\"table\">\r\n        //         <table className=\"table\">\r\n        //             <thead>\r\n        //                 <tr>\r\n        //                     <th scope=\"col\">School</th>\r\n        //                     <th scope=\"col\">Board</th>\r\n        //                     <th scope=\"col\">City</th>\r\n        //                     <th scope=\"col\">Student Cases</th>\r\n        //                     <th scope=\"col\">Staff Cases</th>\r\n        //                     <th scope=\"col\">Unspecified Cases</th>\r\n        //                     <th scope=\"col\">Total Cases</th>\r\n        //                 </tr>\r\n        //             </thead>    \r\n        //         </table>            \r\n        //     </div>\r\n        // );\r\n        \r\n    }\r\n}\r\n\r\nexport default ActiveTable;",["42","43"],"D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\Cards\\CardUI.js",[],"D:\\Documents\\Projects\\Netlify\\covid-react-app\\src\\Chart\\Chart.js",["44","45","46"],"import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line, Label } from \"recharts\";\r\nimport { MDBContainer, MDBCard, MDBCardBody } from 'mdbreact';\r\nimport React, { useState, useEffect } from 'react'\r\nimport moment from 'moment';\r\n\r\nlet requestedData = [];\r\n\r\n\r\nfunction Chart(props) {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    \r\n\r\n    useEffect(()=>{\r\n        fetch('https://nameless-fortress-98366.herokuapp.com/https://data.ontario.ca/api/3/action/datastore_search?resource_id=7fbdbb48-d074-45d9-93cb-f7de58950418&limit=500')\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n            setData(data.result.records);\r\n            setLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    let graph = null;\r\n    \r\n\r\n    if(loading) {\r\n        graph = \r\n            <div className=\"loading\">\r\n                <img src=\"Blocks-1s-200px.svg\" />\r\n            </div>\r\n    } else {\r\n        requestedData = data;\r\n        console.log(requestedData);\r\n        console.log(props)\r\n        graph =\r\n        <div>\r\n            <MDBContainer>\r\n                <div className=\"w-auto p-3\">\r\n                    <MDBCard>\r\n                    <MDBCardBody>\r\n                        <h3 className=\"chart-title\">{props.title}</h3>\r\n                        <ResponsiveContainer width=\"99%\" height={400}>\r\n                        <BarChart\r\n                            width={500}\r\n                            aspect={3}\r\n                            data={requestedData}\r\n                            margin={{\r\n                            top: 20,\r\n                            right: 30,\r\n                            left: 20,\r\n                            bottom: 5\r\n                            }}\r\n                        >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis\r\n                            dataKey=\"reported_date\"\r\n                            tickFormatter = {(date) => moment(date).format('D/M/YYYY')}\r\n                            interval=\"{3}\"\r\n                            >\r\n                            <Label position=\"bottom\" value=\"Date\" offset={0}/>\r\n                            </XAxis>\r\n                            <YAxis>\r\n                            <Label value=\"Number of Cases\" angle=\"90\" position=\"insideLeft\"/>\r\n                            </YAxis>\r\n                            <Tooltip labelFormatter={t => moment(t).format('D/M/YYYY')}/>\r\n                            <Legend align=\"left\"/>\r\n                            <Bar\r\n                            dataKey={props.chartKey}\r\n                            name={props.barName}\r\n                            stackId=\"a\"\r\n                            fill=\"#8884d8\"\r\n                            />\r\n                        </BarChart>\r\n                        </ResponsiveContainer>\r\n                    </MDBCardBody>\r\n                    </MDBCard>\r\n                </div>\r\n            </MDBContainer>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {graph}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chart;",["47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":9,"column":5,"nodeType":"55","messageId":"56","endLine":9,"endColumn":15},{"ruleId":"53","severity":1,"message":"57","line":44,"column":13,"nodeType":"55","messageId":"56","endLine":44,"endColumn":33},{"ruleId":"53","severity":1,"message":"58","line":45,"column":13,"nodeType":"55","messageId":"56","endLine":45,"endColumn":38},{"ruleId":"53","severity":1,"message":"59","line":46,"column":13,"nodeType":"55","messageId":"56","endLine":46,"endColumn":25},{"ruleId":"53","severity":1,"message":"60","line":47,"column":13,"nodeType":"55","messageId":"56","endLine":47,"endColumn":30},{"ruleId":"49","replacedBy":"61"},{"ruleId":"51","replacedBy":"62"},{"ruleId":"53","severity":1,"message":"63","line":1,"column":92,"nodeType":"55","messageId":"56","endLine":1,"endColumn":101},{"ruleId":"53","severity":1,"message":"64","line":1,"column":103,"nodeType":"55","messageId":"56","endLine":1,"endColumn":107},{"ruleId":"65","severity":1,"message":"66","line":32,"column":17,"nodeType":"67","endLine":32,"endColumn":50},{"ruleId":"49","replacedBy":"68"},{"ruleId":"51","replacedBy":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'activeData' is assigned a value but never used.","Identifier","unusedVar","'uniqueMunicipalities' is assigned a value but never used.","'uniqueMunicipalitiesCount' is assigned a value but never used.","'uniqueBoards' is assigned a value but never used.","'uniqueBoardsCount' is assigned a value but never used.",["70"],["71"],"'LineChart' is defined but never used.","'Line' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["70"],["71"],"no-global-assign","no-unsafe-negation"]